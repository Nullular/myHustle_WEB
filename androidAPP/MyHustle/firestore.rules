rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isShopOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.ownerId;
    }
    
    function isCustomerOrShopOwner(resource) {
      return isAuthenticated() && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.ownerId ||
         (resource.data.shopOwnerId != null && 
          get(/databases/$(database)/documents/shops/$(resource.data.shopOwnerId)).data.ownerId == request.auth.uid) ||
         (resource.data.shopId != null && 
          get(/databases/$(database)/documents/shops/$(resource.data.shopId)).data.ownerId == request.auth.uid));
    }
    
    function isParticipant(resource) {
      return isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        request.auth.token.email == "nathan123dejager@gmail.com";
    }

    // Determine if the current user owns the given shop by ID
    function isShopOwnerById(shopId) {
      return isAuthenticated() &&
        get(/databases/$(database)/documents/shops/$(shopId)).data.ownerId == request.auth.uid;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      // Allow authenticated users to search other users by email/username for messaging
      allow read: if isAuthenticated();
      allow read: if isAdmin(); // Admin can read all users
      
      // User memberships subcollection - for chat "inbox" view
      match /memberships/{chatId} {
        // Allow users to read/write their own memberships
        allow read, write: if isAuthenticated() && isOwner(userId);
        // Allow chat participants to create memberships for any participant
        // This is needed for the transaction-based chat creation
        allow create: if isAuthenticated() && 
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Allow chat participants to update membership info (for last message updates, unread counts)  
        allow update: if isAuthenticated() && 
          exists(/databases/$(database)/documents/chats/$(chatId)) &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Shops collection - public read for active shops, owners can write
    match /shops/{shopId} {
      // Allow ANYONE (authenticated or not) to read active shops
      allow read: if resource.data.active == true;
      // Allow authenticated users to create shops they own
      allow create: if isAuthenticated() && 
        request.resource.data.ownerId == request.auth.uid;
      // Allow shop owners to update their own shops OR allow admin to update any shop
      allow update, delete: if isShopOwner(resource) || isAdmin();
      // Admin can read all shops (active and inactive)
      allow read: if isAdmin();
    }
    
    // Products collection - public read for active products, shop owners can write
    match /products/{productId} {
      // Allow ANYONE (authenticated or not) to read active products
      allow read: if resource.data.active == true;
      allow create: if isAuthenticated() && 
        isShopOwnerById(request.resource.data.shopId);
      allow update, delete: if isShopOwner(resource);
      // Admin can read all products
      allow read: if isAdmin();
    }
    
    // Services collection - public read for active services, shop owners can write
    match /services/{serviceId} {
      // Allow ANYONE (authenticated or not) to read active services
      allow read: if resource.data.active == true;
      allow create: if isAuthenticated() && 
        isShopOwnerById(request.resource.data.shopId);
      allow update, delete: if isShopOwner(resource);
      // Admin can read all services
      allow read: if isAdmin();
    }
    
    // Orders collection - customers and shop owners can access their orders
    match /orders/{orderId} {
      // Allow authenticated users to create orders
      allow create: if isAuthenticated();
      // Allow customers and shop owners to read/update their orders
      allow read, update: if isCustomerOrShopOwner(resource);
      // Allow shop owners to delete orders
      allow delete: if isShopOwner(resource);
      // Admin can read all orders
      allow read: if isAdmin();
    }
    
    // Bookings collection - customers and shop owners can access their bookings
    match /bookings/{bookingId} {
      // Allow authenticated users to create bookings
      allow create: if isAuthenticated();
      // Allow customers and shop owners to read/update their bookings
      allow read, update: if isCustomerOrShopOwner(resource);
      // Allow shop owners to delete bookings
      allow delete: if isCustomerOrShopOwner(resource);
      // Admin can read all bookings
      allow read: if isAdmin();
    }
    
    // Chats collection - new industry-standard messaging structure
    match /chats/{chatId} {
      // Only participants can read/write chat metadata
      allow read, write: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      // Allow creation if user is in participants list
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow read: if isAdmin(); // Admin can read all chats
      
      // Messages subcollection - one subcollection per chat
      match /messages/{messageId} {
        // Only chat participants can read messages
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Only authenticated users can create messages, and they must be the sender
        allow create: if isAuthenticated() && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        // Only sender can update their own messages (for edits, etc.)
        allow update: if isAuthenticated() && 
          request.auth.uid == resource.data.senderId;
        allow read: if isAdmin(); // Admin can read all messages
      }
    }

    // Legacy collections - to be removed after migration
    match /conversations/{conversationId} {
      allow read, write: if isParticipant(resource);
      allow read: if isAdmin(); // Admin can read all conversations
    }
    
    match /messages/{messageId} {
      allow read, write: if isAuthenticated() && 
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow read: if isAdmin(); // Admin can read all messages
    }
    
    match /booking_messages/{messageId} {
      allow read, write: if isAuthenticated();
      allow read: if isAdmin(); // Admin can read all booking messages
    }

    // Carts collection - users can read/write their own cart document
    match /carts/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isAdmin(); // Admin can read all carts
    }
    
  // Reviews collection (single table) - public read for visible reviews
    match /reviews/{reviewId} {
      // Public can read visible reviews; admin can read all
      allow read: if resource.data.visible == true || isAdmin();

      // Customers can create reviews for themselves
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.customerId;

      // Customers can update their own review content (restrict fields)
      allow update: if isAuthenticated() &&
        request.auth.uid == resource.data.customerId &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['title','content','rating','detailedRatings','imageUrls','videoUrls','updatedAt']);

      // Shop owners can add an ownerResponse only
      allow update: if isShopOwnerById(resource.data.shopId) &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['ownerResponse','updatedAt']);
    }
    
    // Favorites collection - users can manage their own favorites
    match /favorites/{favoriteId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow read: if isAdmin(); // Admin can read all favorites
    }
    
    // Notifications collection - users can read their own notifications
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      allow read: if isAdmin(); // Admin can read all notifications
    }
    
    // Analytics collection - shop owners can read their own data, admin can read all
    match /analytics/{analyticsId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid == resource.data.entityId || 
         resource.data.scope == "PLATFORM" ||
         isAdmin());
      allow write: if false; // Only server-side functions can write analytics
    }
    
    // App configuration - public read access
    match /app_config/{document} {
      allow read: if true;
      allow write: if isAdmin(); // Only admin can write config
    }
    
    // Test collection - for development only
    match /_test/{document} {
      allow read, write: if isAuthenticated();
    }
  }
}
